// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shenyue-gin/app/service/vrgo/api/api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	git_bilibili_co_go_kratos_gogo_protobuf_compatible "git.bilibili.co/go-kratos/gogo-protobuf/compatible"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_Status1 Status = 0
	Status_Status2 Status = 1
	Status_Status3 Status = 2
)

var Status_name = map[int32]string{
	0: "Status1",
	1: "Status2",
	2: "Status3",
}

var Status_value = map[string]int32{
	"Status1": 0,
	"Status2": 1,
	"Status3": 2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{0}
}

type WebhookReq struct {
	// event
	Event string `protobuf:"bytes,1,opt,name=event,proto3" json:"event"`
	// content
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content"`
	// timestamp
	Timestamp            string   `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WebhookReq) Reset()         { *m = WebhookReq{} }
func (m *WebhookReq) String() string { return proto.CompactTextString(m) }
func (*WebhookReq) ProtoMessage()    {}
func (*WebhookReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{0}
}
func (m *WebhookReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebhookReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebhookReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebhookReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebhookReq.Merge(m, src)
}
func (m *WebhookReq) XXX_Size() int {
	return m.Size()
}
func (m *WebhookReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WebhookReq.DiscardUnknown(m)
}

var xxx_messageInfo_WebhookReq proto.InternalMessageInfo

type WebhookResp struct {
	// content
	Content              string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WebhookResp) Reset()         { *m = WebhookResp{} }
func (m *WebhookResp) String() string { return proto.CompactTextString(m) }
func (*WebhookResp) ProtoMessage()    {}
func (*WebhookResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{1}
}
func (m *WebhookResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebhookResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebhookResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebhookResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebhookResp.Merge(m, src)
}
func (m *WebhookResp) XXX_Size() int {
	return m.Size()
}
func (m *WebhookResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WebhookResp.DiscardUnknown(m)
}

var xxx_messageInfo_WebhookResp proto.InternalMessageInfo

type InfoReq struct {
	// 时间 秒 int类型
	Time                 int64    `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty" form:"time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoReq) Reset()         { *m = InfoReq{} }
func (m *InfoReq) String() string { return proto.CompactTextString(m) }
func (*InfoReq) ProtoMessage()    {}
func (*InfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{2}
}
func (m *InfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoReq.Merge(m, src)
}
func (m *InfoReq) XXX_Size() int {
	return m.Size()
}
func (m *InfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_InfoReq proto.InternalMessageInfo

type InfoResp struct {
	// 时间 秒 int类型
	Time                 int64        `protobuf:"varint,1,opt,name=time,proto3" json:"time"`
	TeamNow              *TeamNow     `protobuf:"bytes,2,opt,name=teamNow,proto3" json:"team_now"`
	PlayerNow            []*PlayerNow `protobuf:"bytes,3,rep,name=playerNow,proto3" json:"player_now"`
	Status               Status       `protobuf:"varint,4,opt,name=status,proto3,enum=demo.service.v1.Status" json:"status"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *InfoResp) Reset()         { *m = InfoResp{} }
func (m *InfoResp) String() string { return proto.CompactTextString(m) }
func (*InfoResp) ProtoMessage()    {}
func (*InfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{3}
}
func (m *InfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoResp.Merge(m, src)
}
func (m *InfoResp) XXX_Size() int {
	return m.Size()
}
func (m *InfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_InfoResp proto.InternalMessageInfo

type PlayerNow struct {
	// red blue
	Coler string `protobuf:"bytes,1,opt,name=coler,proto3" json:"coler"`
	// 英雄名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// 经济
	Economic             int64    `protobuf:"varint,3,opt,name=economic,proto3" json:"economic"`
	X                    int64    `protobuf:"varint,4,opt,name=x,proto3" json:"x"`
	Y                    int64    `protobuf:"varint,5,opt,name=y,proto3" json:"y"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerNow) Reset()         { *m = PlayerNow{} }
func (m *PlayerNow) String() string { return proto.CompactTextString(m) }
func (*PlayerNow) ProtoMessage()    {}
func (*PlayerNow) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{4}
}
func (m *PlayerNow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerNow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerNow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerNow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerNow.Merge(m, src)
}
func (m *PlayerNow) XXX_Size() int {
	return m.Size()
}
func (m *PlayerNow) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerNow.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerNow proto.InternalMessageInfo

type TeamNow struct {
	BlueKill             int64    `protobuf:"varint,1,opt,name=blue_kill,json=blueKill,proto3" json:"blue_kill"`
	RedKill              int64    `protobuf:"varint,2,opt,name=red_kill,json=redKill,proto3" json:"red_kill"`
	BlueTower            int64    `protobuf:"varint,3,opt,name=blue_tower,json=blueTower,proto3" json:"blue_tower"`
	RedTower             int64    `protobuf:"varint,4,opt,name=red_tower,json=redTower,proto3" json:"red_tower"`
	BlueEconomic         string   `protobuf:"bytes,5,opt,name=blue_economic,json=blueEconomic,proto3" json:"blue_economic"`
	RedEconomic          string   `protobuf:"bytes,6,opt,name=red_economic,json=redEconomic,proto3" json:"red_economic"`
	RedName              string   `protobuf:"bytes,7,opt,name=red_name,json=redName,proto3" json:"red_name"`
	BlueName             string   `protobuf:"bytes,8,opt,name=blue_name,json=blueName,proto3" json:"blue_name"`
	RedDragon            int64    `protobuf:"varint,9,opt,name=red_dragon,json=redDragon,proto3" json:"red_dragon"`
	BlueDragon           int64    `protobuf:"varint,10,opt,name=blue_dragon,json=blueDragon,proto3" json:"blue_dragon"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeamNow) Reset()         { *m = TeamNow{} }
func (m *TeamNow) String() string { return proto.CompactTextString(m) }
func (*TeamNow) ProtoMessage()    {}
func (*TeamNow) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{5}
}
func (m *TeamNow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamNow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamNow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamNow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamNow.Merge(m, src)
}
func (m *TeamNow) XXX_Size() int {
	return m.Size()
}
func (m *TeamNow) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamNow.DiscardUnknown(m)
}

var xxx_messageInfo_TeamNow proto.InternalMessageInfo

type EconomicReq struct {
	// 时间 秒 int类型
	Time                 int64    `protobuf:"varint,1,opt,name=time,proto3" json:"time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EconomicReq) Reset()         { *m = EconomicReq{} }
func (m *EconomicReq) String() string { return proto.CompactTextString(m) }
func (*EconomicReq) ProtoMessage()    {}
func (*EconomicReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{6}
}
func (m *EconomicReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EconomicReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EconomicReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EconomicReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EconomicReq.Merge(m, src)
}
func (m *EconomicReq) XXX_Size() int {
	return m.Size()
}
func (m *EconomicReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EconomicReq.DiscardUnknown(m)
}

var xxx_messageInfo_EconomicReq proto.InternalMessageInfo

type EconomicResp struct {
	Economic             []*EconomicItem `protobuf:"bytes,1,rep,name=economic,proto3" json:"economic"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *EconomicResp) Reset()         { *m = EconomicResp{} }
func (m *EconomicResp) String() string { return proto.CompactTextString(m) }
func (*EconomicResp) ProtoMessage()    {}
func (*EconomicResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{7}
}
func (m *EconomicResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EconomicResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EconomicResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EconomicResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EconomicResp.Merge(m, src)
}
func (m *EconomicResp) XXX_Size() int {
	return m.Size()
}
func (m *EconomicResp) XXX_DiscardUnknown() {
	xxx_messageInfo_EconomicResp.DiscardUnknown(m)
}

var xxx_messageInfo_EconomicResp proto.InternalMessageInfo

type EconomicItem struct {
	// red blue
	Coler string `protobuf:"bytes,1,opt,name=coler,proto3" json:"coler"`
	// 英雄名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// 经济
	Value                int64    `protobuf:"varint,3,opt,name=value,proto3" json:"value"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EconomicItem) Reset()         { *m = EconomicItem{} }
func (m *EconomicItem) String() string { return proto.CompactTextString(m) }
func (*EconomicItem) ProtoMessage()    {}
func (*EconomicItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{8}
}
func (m *EconomicItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EconomicItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EconomicItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EconomicItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EconomicItem.Merge(m, src)
}
func (m *EconomicItem) XXX_Size() int {
	return m.Size()
}
func (m *EconomicItem) XXX_DiscardUnknown() {
	xxx_messageInfo_EconomicItem.DiscardUnknown(m)
}

var xxx_messageInfo_EconomicItem proto.InternalMessageInfo

type GradeInfoReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GradeInfoReq) Reset()         { *m = GradeInfoReq{} }
func (m *GradeInfoReq) String() string { return proto.CompactTextString(m) }
func (*GradeInfoReq) ProtoMessage()    {}
func (*GradeInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{9}
}
func (m *GradeInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GradeInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GradeInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GradeInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GradeInfoReq.Merge(m, src)
}
func (m *GradeInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GradeInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GradeInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GradeInfoReq proto.InternalMessageInfo

type MatchListReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchListReq) Reset()         { *m = MatchListReq{} }
func (m *MatchListReq) String() string { return proto.CompactTextString(m) }
func (*MatchListReq) ProtoMessage()    {}
func (*MatchListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{10}
}
func (m *MatchListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchListReq.Merge(m, src)
}
func (m *MatchListReq) XXX_Size() int {
	return m.Size()
}
func (m *MatchListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchListReq.DiscardUnknown(m)
}

var xxx_messageInfo_MatchListReq proto.InternalMessageInfo

// Data 定义了响应中的数据部分
type GradeInfoResp struct {
	Teams []*Team1 `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams"`
	// 场次
	GameStage string `protobuf:"bytes,4,opt,name=game_stage,json=gameStage,proto3" json:"game_stage"`
	//开始时间
	Stime int64 `protobuf:"varint,5,opt,name=stime,proto3" json:"stime"`
	//结束时间
	Etime int64 `protobuf:"varint,6,opt,name=etime,proto3" json:"etime"`
	//主队得分
	HomeScore int32 `protobuf:"varint,8,opt,name=home_score,json=homeScore,proto3" json:"home_score"`
	//客队得分
	AwayScore int32 `protobuf:"varint,9,opt,name=away_score,json=awayScore,proto3" json:"away_score"`
	//主队信息
	HomeTeam *Team1 `protobuf:"bytes,13,opt,name=home_team,json=homeTeam,proto3" json:"home_team"`
	//客队信息
	AwayTeam             *Team1           `protobuf:"bytes,14,opt,name=away_team,json=awayTeam,proto3" json:"away_team"`
	GlobalGradeInfo      *GlobalGradeInfo `protobuf:"bytes,18,opt,name=global_grade_info,json=globalGradeInfo,proto3" json:"global_grade_info"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GradeInfoResp) Reset()         { *m = GradeInfoResp{} }
func (m *GradeInfoResp) String() string { return proto.CompactTextString(m) }
func (*GradeInfoResp) ProtoMessage()    {}
func (*GradeInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{11}
}
func (m *GradeInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GradeInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GradeInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GradeInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GradeInfoResp.Merge(m, src)
}
func (m *GradeInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *GradeInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GradeInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_GradeInfoResp proto.InternalMessageInfo

// Team 定义了一个队伍的结构
type Team1 struct {
	//名字
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	//logo
	Logo string `protobuf:"bytes,2,opt,name=logo,proto3" json:"logo"`
	//选手评分详情
	PlayerGradeDetail    []*PlayerGradeDetail1 `protobuf:"bytes,3,rep,name=player_grade_detail,json=playerGradeDetail,proto3" json:"player_grade_detail"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Team1) Reset()         { *m = Team1{} }
func (m *Team1) String() string { return proto.CompactTextString(m) }
func (*Team1) ProtoMessage()    {}
func (*Team1) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{12}
}
func (m *Team1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Team1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Team1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Team1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Team1.Merge(m, src)
}
func (m *Team1) XXX_Size() int {
	return m.Size()
}
func (m *Team1) XXX_DiscardUnknown() {
	xxx_messageInfo_Team1.DiscardUnknown(m)
}

var xxx_messageInfo_Team1 proto.InternalMessageInfo

// PlayerGradeDetail 定义了一个选手的评分详情
type PlayerGradeDetail1 struct {
	//名字
	Nickname string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname"`
	// 选手照片
	Portrait string `protobuf:"bytes,3,opt,name=portrait,proto3" json:"portrait"`
	//热评
	HotRemark string `protobuf:"bytes,4,opt,name=hot_remark,json=hotRemark,proto3" json:"hot_remark"`
	//评分人数
	GradeUsers int32 `protobuf:"varint,5,opt,name=grade_users,json=gradeUsers,proto3" json:"grade_users"`
	// 平均评分
	AvgGrade string `protobuf:"bytes,6,opt,name=avg_grade,json=avgGrade,proto3" json:"avg_grade"`
	//位置
	Position string `protobuf:"bytes,7,opt,name=position,proto3" json:"position"`
	//死亡
	Death int32 `protobuf:"varint,9,opt,name=death,proto3" json:"death"`
	//杀敌
	Kill int32 `protobuf:"varint,10,opt,name=kill,proto3" json:"kill"`
	//辅助
	Assist int32 `protobuf:"varint,11,opt,name=assist,proto3" json:"assist"`
	//英雄照片
	HeroPhoto            string   `protobuf:"bytes,12,opt,name=hero_photo,json=heroPhoto,proto3" json:"hero_photo"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerGradeDetail1) Reset()         { *m = PlayerGradeDetail1{} }
func (m *PlayerGradeDetail1) String() string { return proto.CompactTextString(m) }
func (*PlayerGradeDetail1) ProtoMessage()    {}
func (*PlayerGradeDetail1) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{13}
}
func (m *PlayerGradeDetail1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerGradeDetail1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerGradeDetail1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerGradeDetail1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerGradeDetail1.Merge(m, src)
}
func (m *PlayerGradeDetail1) XXX_Size() int {
	return m.Size()
}
func (m *PlayerGradeDetail1) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerGradeDetail1.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerGradeDetail1 proto.InternalMessageInfo

// Season 定义了赛季的信息
type Season1 struct {
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	Stime                int64    `protobuf:"varint,4,opt,name=stime,proto3" json:"stime"`
	Etime                int64    `protobuf:"varint,5,opt,name=etime,proto3" json:"etime"`
	Logo                 string   `protobuf:"bytes,6,opt,name=logo,proto3" json:"logo"`
	Rank                 int32    `protobuf:"varint,7,opt,name=rank,proto3" json:"rank"`
	Url                  string   `protobuf:"bytes,8,opt,name=url,proto3" json:"URL"`
	SyncPlatform         int32    `protobuf:"varint,10,opt,name=sync_platform,json=syncPlatform,proto3" json:"syncPlatform"`
	Channel              []int32  `protobuf:"varint,11,rep,packed,name=channel,proto3" json:"channel"`
	ExternalSeasonId     int32    `protobuf:"varint,13,opt,name=external_season_id,json=externalSeasonId,proto3" json:"externalSeasonId"`
	CentreLogo           string   `protobuf:"bytes,14,opt,name=centre_logo,json=centreLogo,proto3" json:"centreLogo"`
	CentreStatus         int32    `protobuf:"varint,15,opt,name=centre_status,json=centreStatus,proto3" json:"centreStatus"`
	GuessVersion         int32    `protobuf:"varint,16,opt,name=guess_version,json=guessVersion,proto3" json:"guessVersion"`
	CentrePcLogo         string   `protobuf:"bytes,17,opt,name=centre_pc_logo,json=centrePcLogo,proto3" json:"centrePCLogo"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Season1) Reset()         { *m = Season1{} }
func (m *Season1) String() string { return proto.CompactTextString(m) }
func (*Season1) ProtoMessage()    {}
func (*Season1) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{14}
}
func (m *Season1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Season1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Season1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Season1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Season1.Merge(m, src)
}
func (m *Season1) XXX_Size() int {
	return m.Size()
}
func (m *Season1) XXX_DiscardUnknown() {
	xxx_messageInfo_Season1.DiscardUnknown(m)
}

var xxx_messageInfo_Season1 proto.InternalMessageInfo

// GlobalGradeInfo 定义了全球评分信息
type GlobalGradeInfo struct {
	HomeTeam             *GlobalGradeTeam1 `protobuf:"bytes,1,opt,name=home_team,json=homeTeam,proto3" json:"home_team"`
	AwayTeam             *GlobalGradeTeam1 `protobuf:"bytes,2,opt,name=away_team,json=awayTeam,proto3" json:"away_team"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GlobalGradeInfo) Reset()         { *m = GlobalGradeInfo{} }
func (m *GlobalGradeInfo) String() string { return proto.CompactTextString(m) }
func (*GlobalGradeInfo) ProtoMessage()    {}
func (*GlobalGradeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{15}
}
func (m *GlobalGradeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalGradeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalGradeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalGradeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalGradeInfo.Merge(m, src)
}
func (m *GlobalGradeInfo) XXX_Size() int {
	return m.Size()
}
func (m *GlobalGradeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalGradeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalGradeInfo proto.InternalMessageInfo

// GlobalGradeTeam 定义了一个队伍的全球评分信息
type GlobalGradeTeam1 struct {
	Players              []*GlobalGradePlayer1 `protobuf:"bytes,1,rep,name=players,proto3" json:"players"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GlobalGradeTeam1) Reset()         { *m = GlobalGradeTeam1{} }
func (m *GlobalGradeTeam1) String() string { return proto.CompactTextString(m) }
func (*GlobalGradeTeam1) ProtoMessage()    {}
func (*GlobalGradeTeam1) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{16}
}
func (m *GlobalGradeTeam1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalGradeTeam1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalGradeTeam1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalGradeTeam1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalGradeTeam1.Merge(m, src)
}
func (m *GlobalGradeTeam1) XXX_Size() int {
	return m.Size()
}
func (m *GlobalGradeTeam1) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalGradeTeam1.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalGradeTeam1 proto.InternalMessageInfo

// GlobalGradePlayer 定义了一个选手的全球评分信息
type GlobalGradePlayer1 struct {
	PlayerId             int32    `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id"`
	Nickname             string   `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname"`
	AvgGrade             string   `protobuf:"bytes,3,opt,name=avg_grade,json=avgGrade,proto3" json:"avg_grade"`
	Place                string   `protobuf:"bytes,4,opt,name=place,proto3" json:"place"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GlobalGradePlayer1) Reset()         { *m = GlobalGradePlayer1{} }
func (m *GlobalGradePlayer1) String() string { return proto.CompactTextString(m) }
func (*GlobalGradePlayer1) ProtoMessage()    {}
func (*GlobalGradePlayer1) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{17}
}
func (m *GlobalGradePlayer1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalGradePlayer1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalGradePlayer1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalGradePlayer1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalGradePlayer1.Merge(m, src)
}
func (m *GlobalGradePlayer1) XXX_Size() int {
	return m.Size()
}
func (m *GlobalGradePlayer1) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalGradePlayer1.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalGradePlayer1 proto.InternalMessageInfo

// 赛程数据
type Contest struct {
	//比赛阶段
	GameStage string `protobuf:"bytes,2,opt,name=GameStage,json=game_stage,proto3" json:"game_stage"`
	//比赛开始时间
	Stime int64 `protobuf:"varint,3,opt,name=Stime,json=stime,proto3" json:"stime"`
	//比赛结束时间
	Etime int64 `protobuf:"varint,4,opt,name=Etime,json=etime,proto3" json:"etime"`
	//主场分数
	HomeScore int64 `protobuf:"varint,7,opt,name=HomeScore,json=home_score,proto3" json:"home_score"`
	//客场分数
	AwayScore int64 `protobuf:"varint,8,opt,name=AwayScore,json=away_score,proto3" json:"away_score"`
	//创建时间
	Status int64 `protobuf:"varint,14,opt,name=Status,json=status,proto3" json:"status"`
	//赛季
	Season *Season1 `protobuf:"bytes,27,opt,name=season,proto3" json:"season"`
	//主场战队信息
	HomeTeam *Team1 `protobuf:"bytes,28,opt,name=HomeTeam,json=home_team,proto3" json:"home_team"`
	//客场战队信息
	AwayTeam             *Team1   `protobuf:"bytes,29,opt,name=AwayTeam,json=away_team,proto3" json:"away_team"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Contest) Reset()         { *m = Contest{} }
func (m *Contest) String() string { return proto.CompactTextString(m) }
func (*Contest) ProtoMessage()    {}
func (*Contest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{18}
}
func (m *Contest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Contest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Contest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Contest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contest.Merge(m, src)
}
func (m *Contest) XXX_Size() int {
	return m.Size()
}
func (m *Contest) XXX_DiscardUnknown() {
	xxx_messageInfo_Contest.DiscardUnknown(m)
}

var xxx_messageInfo_Contest proto.InternalMessageInfo

type MatchListResp struct {
	MatchList            []*MatchList `protobuf:"bytes,1,rep,name=matchList,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MatchListResp) Reset()         { *m = MatchListResp{} }
func (m *MatchListResp) String() string { return proto.CompactTextString(m) }
func (*MatchListResp) ProtoMessage()    {}
func (*MatchListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{19}
}
func (m *MatchListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchListResp.Merge(m, src)
}
func (m *MatchListResp) XXX_Size() int {
	return m.Size()
}
func (m *MatchListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchListResp.DiscardUnknown(m)
}

var xxx_messageInfo_MatchListResp proto.InternalMessageInfo

type MatchList struct {
	//比赛阶段
	GameStage string `protobuf:"bytes,2,opt,name=GameStage,json=game_stage,proto3" json:"game_stage"`
	//比赛开始时间
	Stime int64 `protobuf:"varint,3,opt,name=Stime,json=stime,proto3" json:"stime"`
	//比赛结束时间
	Etime int64 `protobuf:"varint,4,opt,name=Etime,json=etime,proto3" json:"etime"`
	//主场分数
	HomeScore int64 `protobuf:"varint,7,opt,name=HomeScore,json=home_score,proto3" json:"home_score"`
	//客场分数
	AwayScore int64 `protobuf:"varint,8,opt,name=AwayScore,json=away_score,proto3" json:"away_score"`
	//赛季
	Season *Season `protobuf:"bytes,27,opt,name=season,proto3" json:"season"`
	//主场战队信息
	HomeTeam *Team `protobuf:"bytes,28,opt,name=HomeTeam,json=home_team,proto3" json:"home_team"`
	//客场战队信息
	AwayTeam             *Team    `protobuf:"bytes,29,opt,name=AwayTeam,json=away_team,proto3" json:"away_team"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchList) Reset()         { *m = MatchList{} }
func (m *MatchList) String() string { return proto.CompactTextString(m) }
func (*MatchList) ProtoMessage()    {}
func (*MatchList) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{20}
}
func (m *MatchList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchList.Merge(m, src)
}
func (m *MatchList) XXX_Size() int {
	return m.Size()
}
func (m *MatchList) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchList.DiscardUnknown(m)
}

var xxx_messageInfo_MatchList proto.InternalMessageInfo

// 赛季数据
type Season struct {
	//简称
	Title string `protobuf:"bytes,3,opt,name=Title,json=title,proto3" json:"title"`
	//全称
	SubTitle string `protobuf:"bytes,4,opt,name=SubTitle,json=sub_title,proto3" json:"sub_title"`
	//开始时间
	Stime int64 `protobuf:"varint,5,opt,name=Stime,json=stime,proto3" json:"stime"`
	//结束时间
	Etime int64 `protobuf:"varint,6,opt,name=Etime,json=etime,proto3" json:"etime"`
	// logo
	Logo string `protobuf:"bytes,8,opt,name=Logo,json=logo,proto3" json:"logo"`
	//赛季URL
	URL                  string   `protobuf:"bytes,13,opt,name=URL,json=url,proto3" json:"url"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Season) Reset()         { *m = Season{} }
func (m *Season) String() string { return proto.CompactTextString(m) }
func (*Season) ProtoMessage()    {}
func (*Season) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{21}
}
func (m *Season) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Season) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Season.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Season) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Season.Merge(m, src)
}
func (m *Season) XXX_Size() int {
	return m.Size()
}
func (m *Season) XXX_DiscardUnknown() {
	xxx_messageInfo_Season.DiscardUnknown(m)
}

var xxx_messageInfo_Season proto.InternalMessageInfo

type Team struct {
	//简称
	Title string `protobuf:"bytes,2,opt,name=Title,json=title,proto3" json:"title"`
	//全称
	SubTitle string `protobuf:"bytes,3,opt,name=SubTitle,json=sub_title,proto3" json:"sub_title"`
	//英文全称
	Logo                 string   `protobuf:"bytes,7,opt,name=Logo,json=logo,proto3" json:"logo"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Team) Reset()         { *m = Team{} }
func (m *Team) String() string { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()    {}
func (*Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{22}
}
func (m *Team) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Team.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Team.Merge(m, src)
}
func (m *Team) XXX_Size() int {
	return m.Size()
}
func (m *Team) XXX_DiscardUnknown() {
	xxx_messageInfo_Team.DiscardUnknown(m)
}

var xxx_messageInfo_Team proto.InternalMessageInfo

// 游戏数据
type Game struct {
	//中文全称
	Title string `protobuf:"bytes,2,opt,name=Title,json=title,proto3" json:"title"`
	//游戏简称
	SubTitle string `protobuf:"bytes,3,opt,name=SubTitle,json=sub_title,proto3" json:"sub_title"`
	//英文全称
	ETitle string `protobuf:"bytes,4,opt,name=ETitle,json=e_title,proto3" json:"e_title"`
	//平台
	Plat string `protobuf:"bytes,5,opt,name=Plat,json=plat,proto3" json:"plat"`
	//游戏类型
	GameType int64 `protobuf:"varint,6,opt,name=GameType,json=game_type,proto3" json:"game_type"`
	//游戏 logo
	Logo string `protobuf:"bytes,7,opt,name=Logo,json=logo,proto3" json:"logo"`
	//发行商
	Publisher string `protobuf:"bytes,8,opt,name=Publisher,json=publisher,proto3" json:"publisher"`
	//运行商
	Operations string `protobuf:"bytes,9,opt,name=Operations,json=operations,proto3" json:"operations"`
	//发布时间
	PbTime int64 `protobuf:"varint,10,opt,name=PbTime,json=pb_time,proto3" json:"pb_time"`
	//备注
	Dic string `protobuf:"bytes,11,opt,name=Dic,json=dic,proto3" json:"dic"`
	// LOGO全
	LogoFull             string   `protobuf:"bytes,12,opt,name=LogoFull,json=logo_full,proto3" json:"logo_full"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Game) Reset()         { *m = Game{} }
func (m *Game) String() string { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()    {}
func (*Game) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12313df96c4ed2e, []int{23}
}
func (m *Game) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Game) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Game.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Game) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Game.Merge(m, src)
}
func (m *Game) XXX_Size() int {
	return m.Size()
}
func (m *Game) XXX_DiscardUnknown() {
	xxx_messageInfo_Game.DiscardUnknown(m)
}

var xxx_messageInfo_Game proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("demo.service.v1.Status", Status_name, Status_value)
	proto.RegisterType((*WebhookReq)(nil), "demo.service.v1.WebhookReq")
	proto.RegisterType((*WebhookResp)(nil), "demo.service.v1.WebhookResp")
	proto.RegisterType((*InfoReq)(nil), "demo.service.v1.InfoReq")
	proto.RegisterType((*InfoResp)(nil), "demo.service.v1.InfoResp")
	proto.RegisterType((*PlayerNow)(nil), "demo.service.v1.PlayerNow")
	proto.RegisterType((*TeamNow)(nil), "demo.service.v1.TeamNow")
	proto.RegisterType((*EconomicReq)(nil), "demo.service.v1.EconomicReq")
	proto.RegisterType((*EconomicResp)(nil), "demo.service.v1.EconomicResp")
	proto.RegisterType((*EconomicItem)(nil), "demo.service.v1.EconomicItem")
	proto.RegisterType((*GradeInfoReq)(nil), "demo.service.v1.GradeInfoReq")
	proto.RegisterType((*MatchListReq)(nil), "demo.service.v1.MatchListReq")
	proto.RegisterType((*GradeInfoResp)(nil), "demo.service.v1.GradeInfoResp")
	proto.RegisterType((*Team1)(nil), "demo.service.v1.Team1")
	proto.RegisterType((*PlayerGradeDetail1)(nil), "demo.service.v1.PlayerGradeDetail1")
	proto.RegisterType((*Season1)(nil), "demo.service.v1.Season1")
	proto.RegisterType((*GlobalGradeInfo)(nil), "demo.service.v1.GlobalGradeInfo")
	proto.RegisterType((*GlobalGradeTeam1)(nil), "demo.service.v1.GlobalGradeTeam1")
	proto.RegisterType((*GlobalGradePlayer1)(nil), "demo.service.v1.GlobalGradePlayer1")
	proto.RegisterType((*Contest)(nil), "demo.service.v1.Contest")
	proto.RegisterType((*MatchListResp)(nil), "demo.service.v1.MatchListResp")
	proto.RegisterType((*MatchList)(nil), "demo.service.v1.MatchList")
	proto.RegisterType((*Season)(nil), "demo.service.v1.Season")
	proto.RegisterType((*Team)(nil), "demo.service.v1.Team")
	proto.RegisterType((*Game)(nil), "demo.service.v1.Game")
}

func init() {
	proto.RegisterFile("shenyue-gin/app/service/vrgo/api/api.proto", fileDescriptor_a12313df96c4ed2e)
}

var fileDescriptor_a12313df96c4ed2e = []byte{
	// 2084 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x18, 0x4d, 0x73, 0x1b, 0x59,
	0x31, 0xe3, 0xd1, 0x67, 0xcb, 0x9f, 0x2f, 0xbb, 0x1b, 0xd9, 0x71, 0x3c, 0x66, 0x02, 0x85, 0x2b,
	0xa9, 0x58, 0xd8, 0x81, 0xa5, 0x8a, 0xe5, 0x40, 0xb4, 0x09, 0x4e, 0x20, 0x59, 0xcc, 0xb3, 0x97,
	0xad, 0xe5, 0x80, 0x6a, 0x24, 0x3d, 0xcb, 0x83, 0x47, 0xf3, 0x26, 0x33, 0x23, 0x3b, 0x3e, 0x42,
	0xf1, 0x0f, 0xb8, 0x70, 0x81, 0x3f, 0xc0, 0x81, 0xda, 0x13, 0x17, 0x4e, 0x9c, 0xf6, 0xb8, 0x55,
	0x5c, 0x29, 0xd5, 0x12, 0x38, 0xe9, 0x06, 0xbf, 0x80, 0xea, 0x7e, 0x6f, 0x3e, 0x64, 0x7d, 0x38,
	0x29, 0x38, 0xed, 0x41, 0x9a, 0x7e, 0xfd, 0xba, 0xfb, 0xf5, 0xd7, 0xeb, 0xee, 0x19, 0x78, 0x10,
	0x9d, 0x0a, 0xff, 0xd3, 0x81, 0x38, 0x0c, 0xe5, 0x2f, 0x45, 0x27, 0x6e, 0x38, 0x41, 0xd0, 0x88,
	0x44, 0x78, 0xee, 0x76, 0x44, 0xe3, 0x3c, 0xec, 0xc9, 0x86, 0x13, 0xb8, 0xf8, 0xdb, 0x0d, 0x42,
	0x19, 0x4b, 0xb6, 0xd2, 0x15, 0x7d, 0xb9, 0xab, 0x09, 0x76, 0xcf, 0xf7, 0x36, 0x1e, 0xf4, 0xdc,
	0xf8, 0x74, 0xd0, 0xde, 0xed, 0xc8, 0x7e, 0xa3, 0x27, 0x7b, 0xb2, 0x41, 0x74, 0xed, 0xc1, 0x09,
	0xad, 0x68, 0x41, 0x90, 0xe2, 0xdf, 0xb8, 0xdd, 0x93, 0xb2, 0xe7, 0x89, 0x8c, 0x4a, 0xf4, 0x83,
	0xf8, 0x52, 0x6f, 0x6e, 0xea, 0x4d, 0x3a, 0xd2, 0xf7, 0x65, 0xec, 0xc4, 0xae, 0xf4, 0x23, 0xb5,
	0x6b, 0xff, 0xca, 0x00, 0xf8, 0x44, 0xb4, 0x4f, 0xa5, 0x3c, 0xe3, 0xe2, 0x25, 0xb3, 0xa0, 0x28,
	0xce, 0x85, 0x1f, 0xd7, 0x8d, 0x6d, 0x63, 0xa7, 0xda, 0xac, 0x8e, 0x86, 0x96, 0x42, 0x70, 0xf5,
	0x60, 0xdf, 0x80, 0x72, 0x47, 0xfa, 0x31, 0x92, 0x2c, 0x10, 0x49, 0x6d, 0x34, 0xb4, 0x12, 0x14,
	0x4f, 0x00, 0x76, 0x1f, 0xaa, 0xb1, 0xdb, 0x17, 0x51, 0xec, 0xf4, 0x83, 0xba, 0x49, 0x84, 0x4b,
	0xa3, 0xa1, 0x95, 0x21, 0x79, 0x06, 0xda, 0xdf, 0x86, 0x5a, 0xaa, 0x42, 0x14, 0xbc, 0xe1, 0x11,
	0xf6, 0x2e, 0x94, 0x9f, 0xf9, 0x27, 0x12, 0xb5, 0xbe, 0x0b, 0x05, 0x94, 0x46, 0x4a, 0x9b, 0xcd,
	0x95, 0xff, 0x0c, 0xad, 0xda, 0x89, 0x0c, 0xfb, 0xdf, 0xb3, 0x11, 0x6b, 0x73, 0xda, 0xb4, 0xff,
	0x6d, 0x40, 0x45, 0x31, 0x44, 0x01, 0xdb, 0x1c, 0xe3, 0xa8, 0x8c, 0x86, 0x16, 0xad, 0x15, 0x29,
	0xfb, 0x01, 0x94, 0x63, 0xe1, 0xf4, 0x3f, 0x92, 0x17, 0xa4, 0x41, 0x6d, 0xbf, 0xbe, 0x7b, 0x25,
	0x42, 0xbb, 0xc7, 0x6a, 0xbf, 0xb9, 0x38, 0x1a, 0x5a, 0x15, 0x24, 0x6e, 0xf9, 0xf2, 0x82, 0x27,
	0x6c, 0xec, 0x29, 0x54, 0x03, 0xcf, 0xb9, 0x14, 0x21, 0xca, 0x30, 0xb7, 0xcd, 0x9d, 0xda, 0xfe,
	0xc6, 0x84, 0x8c, 0xc3, 0x84, 0xa2, 0xb9, 0x3c, 0x1a, 0x5a, 0xa0, 0x18, 0x48, 0x4e, 0xc6, 0xcc,
	0x3e, 0x80, 0x52, 0x14, 0x3b, 0xf1, 0x20, 0xaa, 0x17, 0xb6, 0x8d, 0x9d, 0xe5, 0xfd, 0x5b, 0x13,
	0x62, 0x8e, 0x68, 0xbb, 0x09, 0xa3, 0xa1, 0xa5, 0x49, 0xb9, 0x7e, 0xda, 0x7f, 0x30, 0xa0, 0x9a,
	0x9e, 0x82, 0xc1, 0xed, 0x48, 0x4f, 0x84, 0xf9, 0xe0, 0x12, 0x82, 0xab, 0x07, 0x7a, 0xc5, 0x77,
	0xfa, 0x42, 0xbb, 0x9d, 0xbc, 0x82, 0x6b, 0x4e, 0xff, 0x6c, 0x07, 0x2a, 0xa2, 0x23, 0x7d, 0xd9,
	0x77, 0x3b, 0x14, 0x52, 0x53, 0x19, 0x9f, 0xe0, 0x78, 0x0a, 0xb1, 0x9b, 0x60, 0xbc, 0x22, 0x75,
	0xcd, 0x66, 0x71, 0x34, 0xb4, 0x8c, 0x57, 0xdc, 0x78, 0x85, 0xc8, 0xcb, 0x7a, 0x31, 0x43, 0x5e,
	0x72, 0xe3, 0xd2, 0xfe, 0xbb, 0x09, 0x65, 0xed, 0x4a, 0x76, 0x0f, 0xaa, 0x6d, 0x6f, 0x20, 0x5a,
	0x67, 0xae, 0xe7, 0xe9, 0xc0, 0x50, 0xce, 0xa4, 0x48, 0x5e, 0x41, 0xf0, 0xc7, 0xae, 0xe7, 0xb1,
	0x6f, 0x42, 0x25, 0x14, 0x5d, 0x45, 0xba, 0x90, 0xe9, 0x92, 0xe0, 0x78, 0x39, 0x14, 0x5d, 0x22,
	0x7c, 0x00, 0x40, 0xfc, 0xb1, 0xbc, 0x10, 0xa1, 0x56, 0x9b, 0xbc, 0x9d, 0x61, 0x39, 0x9d, 0x70,
	0x8c, 0x20, 0xea, 0x80, 0x32, 0x14, 0x75, 0x21, 0xd3, 0x21, 0x45, 0x72, 0x3c, 0x43, 0xd1, 0xbe,
	0x0f, 0x4b, 0x24, 0x24, 0x75, 0x4a, 0x91, 0xdc, 0xb6, 0x36, 0x1a, 0x5a, 0xe3, 0x1b, 0x7c, 0x11,
	0x97, 0x4f, 0x12, 0xef, 0x3c, 0x84, 0x45, 0x14, 0x97, 0xb2, 0x95, 0x88, 0x6d, 0x75, 0x34, 0xb4,
	0xc6, 0xf0, 0xbc, 0x16, 0x8a, 0x6e, 0xca, 0xa4, 0x0d, 0xa6, 0xf0, 0x94, 0x89, 0x21, 0x35, 0x98,
	0x42, 0x84, 0x06, 0x7f, 0x84, 0x51, 0x4a, 0xbc, 0x48, 0x94, 0x95, 0xec, 0xe6, 0xa5, 0x48, 0xe5,
	0x45, 0xa2, 0x7d, 0x00, 0x80, 0x02, 0xba, 0xa1, 0xd3, 0x93, 0x7e, 0xbd, 0x9a, 0x39, 0x27, 0xc3,
	0x72, 0x34, 0xfd, 0x31, 0x81, 0xec, 0x5b, 0x50, 0x23, 0x29, 0x9a, 0x1e, 0xd4, 0x6d, 0x1b, 0x0d,
	0xad, 0x3c, 0x9a, 0x93, 0x67, 0x15, 0x87, 0x7d, 0x1f, 0x6a, 0x89, 0x05, 0x78, 0x4f, 0xe7, 0xde,
	0x3a, 0xfb, 0x13, 0x58, 0xcc, 0x88, 0xa3, 0x80, 0x1d, 0xe4, 0xf2, 0xcd, 0xa0, 0x2b, 0x74, 0x67,
	0x22, 0xf7, 0x13, 0x86, 0x67, 0xb1, 0xe8, 0xcf, 0x4a, 0x47, 0xdb, 0xcf, 0x04, 0x23, 0xdd, 0xff,
	0x7a, 0x0f, 0x2c, 0x28, 0x9e, 0x3b, 0xde, 0x40, 0xe8, 0x6c, 0x22, 0x76, 0x42, 0x70, 0xf5, 0xb0,
	0x97, 0x61, 0xf1, 0x20, 0x74, 0xba, 0x42, 0x97, 0x27, 0x5c, 0xbf, 0x70, 0xe2, 0xce, 0xe9, 0x73,
	0x37, 0x8a, 0x71, 0xfd, 0x9b, 0x02, 0x2c, 0xe5, 0x08, 0xa2, 0x80, 0x7d, 0x17, 0x8a, 0x58, 0x39,
	0x22, 0x6d, 0xe7, 0x7b, 0x53, 0xcb, 0xcd, 0x9e, 0x3a, 0x8a, 0x08, 0xb9, 0x7a, 0x60, 0x04, 0x7b,
	0x4e, 0x5f, 0xb4, 0xa2, 0xd8, 0xe9, 0x09, 0x4a, 0xd8, 0xaa, 0x8a, 0x60, 0x86, 0xe5, 0x55, 0x84,
	0x8f, 0x10, 0x44, 0xd5, 0x23, 0x8a, 0x40, 0x31, 0x53, 0x9d, 0x10, 0x5c, 0x3d, 0xa8, 0xfe, 0x13,
	0x41, 0x29, 0x23, 0x10, 0x8a, 0x80, 0x1e, 0x78, 0xe0, 0xa9, 0x44, 0xd1, 0x1d, 0x19, 0xaa, 0xfc,
	0x2a, 0xaa, 0x03, 0x33, 0x2c, 0xaf, 0x22, 0x7c, 0x84, 0x20, 0x92, 0x3b, 0x17, 0xce, 0xa5, 0x26,
	0xaf, 0x66, 0xe4, 0x19, 0x96, 0x57, 0x11, 0x56, 0xe4, 0x4d, 0x20, 0xde, 0x16, 0x1a, 0x57, 0x5f,
	0xa2, 0xd2, 0x3b, 0xcb, 0x17, 0x94, 0xd4, 0x29, 0x31, 0xaf, 0x20, 0x88, 0x3b, 0x28, 0x83, 0x84,
	0x93, 0x8c, 0xe5, 0xeb, 0x65, 0xa4, 0xc4, 0xbc, 0x82, 0x20, 0xc9, 0xe8, 0xc0, 0x5a, 0xcf, 0x93,
	0x6d, 0xc7, 0x6b, 0xf5, 0x30, 0x4e, 0x2d, 0xd7, 0x3f, 0x91, 0x75, 0x46, 0xb2, 0xb6, 0x27, 0x64,
	0x1d, 0x10, 0x65, 0x1a, 0xd0, 0xe6, 0xbb, 0xa3, 0xa1, 0x35, 0xc9, 0xce, 0x57, 0x7a, 0xe3, 0x74,
	0xf6, 0x67, 0x06, 0x14, 0x49, 0x8f, 0x34, 0xdf, 0x8c, 0xa9, 0xf9, 0xb6, 0x09, 0x05, 0x4f, 0xf6,
	0x64, 0x3e, 0x1b, 0x71, 0xcd, 0xe9, 0x9f, 0x79, 0x70, 0x53, 0x37, 0x0e, 0x75, 0x56, 0x57, 0xc4,
	0x8e, 0xeb, 0xe9, 0x9e, 0x73, 0x77, 0x46, 0xcf, 0x21, 0x25, 0x1e, 0x13, 0xe5, 0x5e, 0xf3, 0xd6,
	0x68, 0x68, 0x4d, 0x93, 0xc1, 0xd7, 0x82, 0xab, 0xc4, 0xf6, 0x67, 0x26, 0xb0, 0x49, 0x11, 0xd8,
	0x1a, 0x7c, 0xb7, 0x73, 0x96, 0x33, 0x82, 0xee, 0x62, 0x82, 0xe3, 0x29, 0x84, 0x94, 0x81, 0x0c,
	0xe3, 0xd0, 0x71, 0x63, 0x3d, 0x17, 0x10, 0x65, 0x82, 0xe3, 0x29, 0xa4, 0x32, 0x2d, 0x6e, 0x85,
	0xa2, 0xef, 0x84, 0x67, 0xf9, 0xd4, 0xce, 0xb0, 0x98, 0x69, 0x31, 0x27, 0x10, 0x8b, 0x93, 0x52,
	0x7e, 0x10, 0x89, 0x30, 0xa2, 0x04, 0x2f, 0xaa, 0xe2, 0x94, 0x43, 0x73, 0xa0, 0xc5, 0xc7, 0x08,
	0x63, 0xa5, 0x74, 0xce, 0x7b, 0xca, 0x64, 0x5d, 0x84, 0x55, 0x42, 0x24, 0x48, 0x5e, 0x71, 0xce,
	0x7b, 0x64, 0xa7, 0x52, 0x3b, 0x72, 0x71, 0x72, 0xca, 0x97, 0xdf, 0x04, 0xc7, 0x53, 0x08, 0x6f,
	0x50, 0x57, 0x38, 0xf1, 0xa9, 0x4e, 0x76, 0xba, 0x41, 0x84, 0xe0, 0xea, 0x81, 0xe1, 0xa4, 0xb6,
	0x05, 0xb4, 0x4f, 0xe1, 0xa4, 0x96, 0x45, 0xff, 0xcc, 0x86, 0x92, 0x13, 0x45, 0x6e, 0x14, 0xd7,
	0x6b, 0xb4, 0x4f, 0x5d, 0x5d, 0x61, 0xb8, 0x7e, 0x92, 0x67, 0x44, 0x28, 0x5b, 0xc1, 0xa9, 0x8c,
	0x65, 0x7d, 0x31, 0xe7, 0x99, 0x14, 0xcb, 0xab, 0x08, 0x1f, 0x22, 0x68, 0xff, 0xa5, 0x00, 0xe5,
	0x23, 0xe1, 0x44, 0xd2, 0xdf, 0x43, 0xed, 0x62, 0x37, 0xf6, 0x84, 0xf6, 0xbd, 0x2a, 0x28, 0x88,
	0xe0, 0xea, 0x91, 0x55, 0x88, 0xc2, 0x75, 0x15, 0xa2, 0x38, 0xa3, 0x42, 0x24, 0xe9, 0x5a, 0x9a,
	0x9a, 0xae, 0x9b, 0x50, 0x08, 0x1d, 0xff, 0x8c, 0x9c, 0xa8, 0xad, 0xc7, 0x35, 0xa7, 0x7f, 0xb6,
	0x0e, 0xe6, 0x20, 0xf4, 0x74, 0xdb, 0x2a, 0x8f, 0x86, 0x96, 0xf9, 0x31, 0x7f, 0xce, 0x11, 0xc7,
	0xbe, 0x03, 0x4b, 0xd1, 0xa5, 0xdf, 0x69, 0x05, 0x9e, 0x13, 0xe3, 0x70, 0xa7, 0xfd, 0x47, 0x6d,
	0x13, 0x37, 0x0e, 0x35, 0x9e, 0x8f, 0xad, 0x68, 0x98, 0x3c, 0x75, 0x7c, 0x5f, 0x78, 0xf5, 0xda,
	0xb6, 0xb9, 0x53, 0xd4, 0xc3, 0xa4, 0x42, 0xf1, 0x04, 0x60, 0x4d, 0x60, 0xe2, 0x55, 0x2c, 0x42,
	0xdf, 0xf1, 0x5a, 0x11, 0xf9, 0xaa, 0xe5, 0x76, 0xa9, 0x02, 0x15, 0x9b, 0xef, 0x8c, 0x86, 0xd6,
	0x6a, 0xb2, 0xab, 0x1c, 0xf9, 0xac, 0xcb, 0x27, 0x30, 0xac, 0x01, 0xb5, 0x8e, 0xf0, 0xe3, 0x50,
	0xb4, 0xc8, 0xfe, 0xe5, 0x2c, 0x2e, 0x0a, 0xfd, 0x1c, 0xbd, 0x90, 0x83, 0xd1, 0x24, 0xcd, 0xa0,
	0x27, 0xbc, 0x95, 0xcc, 0x24, 0xb5, 0xa1, 0x46, 0x3b, 0x3e, 0xb6, 0x42, 0xb6, 0xde, 0x40, 0x44,
	0x51, 0xeb, 0x5c, 0x84, 0x11, 0x26, 0xe4, 0x6a, 0xc6, 0x46, 0x1b, 0x3f, 0x53, 0x78, 0x3e, 0xb6,
	0x62, 0xef, 0xc3, 0xb2, 0x3e, 0x2d, 0xe8, 0x28, 0x0d, 0xd7, 0xb2, 0xc1, 0x43, 0xed, 0x1c, 0x7e,
	0x48, 0x3a, 0x26, 0xab, 0x0e, 0xae, 0xec, 0x3f, 0x19, 0xb0, 0x72, 0xa5, 0xc4, 0xb1, 0x17, 0xf9,
	0x3a, 0x6d, 0x50, 0x5d, 0xfc, 0xda, 0xbc, 0xba, 0x78, 0x4d, 0xc9, 0x7e, 0x91, 0x2f, 0xd9, 0x0b,
	0x6f, 0x25, 0x6e, 0x4a, 0xf5, 0xb6, 0x7f, 0x01, 0xab, 0x57, 0x89, 0xd9, 0x8f, 0xa0, 0xac, 0xaa,
	0x59, 0xd2, 0x63, 0xef, 0xce, 0x3b, 0x40, 0x95, 0xb8, 0x3d, 0x95, 0x2c, 0x9a, 0x8f, 0x27, 0x80,
	0xfd, 0x67, 0x03, 0xd8, 0x24, 0x31, 0xd6, 0x13, 0x5d, 0x45, 0xdd, 0x2e, 0x39, 0xa5, 0xa8, 0x54,
	0x4c, 0x91, 0xbc, 0xa2, 0xc0, 0x67, 0xdd, 0xb1, 0x82, 0xb9, 0x30, 0xb7, 0x60, 0x8e, 0x55, 0x29,
	0x73, 0x7e, 0x95, 0xb2, 0xa0, 0x18, 0x78, 0x4e, 0x27, 0x19, 0x04, 0xe8, 0x6e, 0x12, 0x82, 0xab,
	0x87, 0xfd, 0x57, 0x13, 0xca, 0x1f, 0xe2, 0xfb, 0x13, 0x55, 0x91, 0xea, 0x41, 0x32, 0x18, 0x68,
	0x1d, 0xae, 0x4e, 0x0e, 0x39, 0x18, 0x65, 0x1f, 0xd1, 0xbd, 0x37, 0x67, 0x17, 0x86, 0x27, 0x57,
	0x2b, 0xc7, 0x95, 0xd1, 0xa1, 0xfa, 0x34, 0x19, 0x0c, 0xe8, 0xfe, 0x9b, 0x13, 0x93, 0x43, 0x0e,
	0x46, 0xf2, 0x47, 0xc9, 0x60, 0x40, 0x15, 0xc1, 0x9c, 0x98, 0x1c, 0x72, 0x30, 0x16, 0x4e, 0x75,
	0x3f, 0xe8, 0xe2, 0x99, 0xd3, 0x5e, 0x87, 0xd8, 0xf7, 0xa1, 0xa4, 0x2e, 0x77, 0xfd, 0xf6, 0x8c,
	0xd7, 0x3a, 0x5d, 0x27, 0x35, 0x37, 0x2d, 0xb8, 0x7e, 0xb2, 0x26, 0x54, 0x9e, 0xea, 0x8c, 0xad,
	0x6f, 0xbe, 0xcd, 0x6c, 0x92, 0x81, 0x28, 0xe3, 0x91, 0x4e, 0xd3, 0xfa, 0x9d, 0xb7, 0x99, 0x4d,
	0x32, 0xd0, 0x3e, 0x82, 0xa5, 0xdc, 0x38, 0x19, 0x05, 0x38, 0xf1, 0xf4, 0x13, 0x84, 0xce, 0xee,
	0xc9, 0x97, 0xcd, 0x94, 0x45, 0x97, 0x64, 0x64, 0xce, 0xd8, 0xec, 0xdf, 0x9b, 0x50, 0x4d, 0x49,
	0xbe, 0x6a, 0xb9, 0xf1, 0xc1, 0x95, 0xb8, 0xdf, 0x9a, 0x11, 0xf7, 0xa9, 0x61, 0x7f, 0x34, 0x11,
	0xf6, 0x77, 0xa7, 0x86, 0x6c, 0x4e, 0xd4, 0x1f, 0x4d, 0x44, 0x7d, 0x9e, 0x88, 0xa9, 0x41, 0xff,
	0xc2, 0x80, 0x92, 0x52, 0x12, 0x9d, 0x79, 0x3c, 0xb7, 0x87, 0xdf, 0x83, 0xca, 0xd1, 0xa0, 0xad,
	0x68, 0x0a, 0x59, 0xc5, 0x88, 0x06, 0xed, 0x96, 0xa2, 0xcb, 0xc0, 0x2c, 0x74, 0xc5, 0xeb, 0x42,
	0x57, 0x9a, 0xdd, 0xef, 0xb1, 0x4f, 0xe8, 0xa6, 0x7d, 0xb5, 0xdf, 0xaf, 0x03, 0xb6, 0x70, 0xea,
	0xa4, 0xba, 0xa3, 0x0f, 0x42, 0x8f, 0x3a, 0xba, 0xfd, 0x12, 0x0a, 0x54, 0xfd, 0x53, 0x7b, 0x16,
	0xde, 0xc0, 0x1e, 0xf3, 0x1a, 0x7b, 0x12, 0x6d, 0xca, 0xd3, 0xb4, 0xb1, 0xff, 0x68, 0x42, 0xe1,
	0x40, 0xbf, 0xc3, 0xfd, 0xff, 0xce, 0xfc, 0x3a, 0x94, 0x9e, 0xe4, 0xbd, 0x4d, 0x5d, 0x43, 0x68,
	0xba, 0x04, 0x40, 0xcd, 0x70, 0x2a, 0xd1, 0x5f, 0x09, 0x48, 0x33, 0x9c, 0x65, 0x38, 0xfd, 0xe3,
	0x79, 0xa8, 0xd8, 0xf1, 0x65, 0x90, 0x78, 0x9a, 0xce, 0xa3, 0x4b, 0x16, 0x5f, 0x06, 0xfa, 0x2d,
	0x8e, 0xc0, 0xf9, 0x36, 0xb2, 0xfb, 0x50, 0x3d, 0x1c, 0xb4, 0x3d, 0x37, 0x3a, 0x15, 0x61, 0xfe,
	0x03, 0x40, 0x90, 0x20, 0x79, 0x06, 0xb2, 0x5d, 0x80, 0x9f, 0x04, 0x22, 0x54, 0x9f, 0x04, 0x69,
	0x64, 0xd5, 0x37, 0x5d, 0xa6, 0x58, 0x9e, 0x83, 0xd1, 0xd4, 0xc3, 0xf6, 0x31, 0xa6, 0x83, 0x7a,
	0xfb, 0x57, 0x0d, 0x12, 0x1d, 0xd1, 0x17, 0x3c, 0x01, 0x30, 0xe8, 0x8f, 0xdd, 0x0e, 0x4d, 0xb0,
	0x3a, 0xe8, 0x5d, 0xb7, 0xc3, 0xf1, 0x0f, 0xed, 0x44, 0xdd, 0x7f, 0x38, 0xf0, 0x3c, 0x3d, 0xb9,
	0x92, 0x72, 0xa8, 0x79, 0xeb, 0x64, 0xe0, 0x79, 0x3c, 0x03, 0xef, 0x35, 0x92, 0x92, 0xce, 0x6a,
	0x50, 0x56, 0xd0, 0xde, 0xea, 0x8d, 0x6c, 0xb1, 0xbf, 0x6a, 0x64, 0x8b, 0x87, 0xab, 0x0b, 0xfb,
	0x5f, 0x9a, 0x50, 0x78, 0x2c, 0xfa, 0x92, 0xb5, 0xf3, 0xc5, 0xec, 0xce, 0xec, 0x5a, 0xc8, 0xc5,
	0xcb, 0x8d, 0xad, 0x79, 0xdb, 0x51, 0x60, 0xbf, 0xf7, 0xeb, 0xbf, 0xfd, 0xeb, 0xb7, 0x0b, 0xab,
	0x6c, 0xb9, 0x71, 0x1e, 0x36, 0xa8, 0x60, 0x36, 0xb0, 0x78, 0xe2, 0x19, 0xd9, 0x40, 0x34, 0x79,
	0x46, 0xfe, 0x0b, 0xc0, 0x94, 0x33, 0xc6, 0xde, 0xff, 0xc7, 0xcf, 0xa0, 0xae, 0xde, 0xc0, 0x77,
	0x46, 0xd6, 0x86, 0x4a, 0xfa, 0x05, 0x68, 0x73, 0xe6, 0xc7, 0x0f, 0x3c, 0xe1, 0xce, 0x9c, 0xdd,
	0x28, 0xb0, 0xd7, 0xe9, 0x80, 0x9b, 0x6c, 0x0d, 0x0f, 0x48, 0x3e, 0x8c, 0xa8, 0x33, 0x7e, 0x0a,
	0x05, 0x32, 0x61, 0xb2, 0x19, 0x26, 0xda, 0xaf, 0xcf, 0xd8, 0x89, 0x02, 0xfb, 0x1d, 0x92, 0xbb,
	0xcc, 0x16, 0x51, 0xae, 0x2f, 0x2f, 0x94, 0xc8, 0x4f, 0xa1, 0xac, 0x3f, 0xe8, 0xb2, 0xdb, 0x13,
	0xbc, 0xd9, 0xd7, 0xe6, 0x8d, 0xcd, 0xd9, 0x9b, 0x51, 0x60, 0xdf, 0x24, 0xd9, 0x4b, 0x76, 0x0d,
	0x65, 0x5f, 0xa8, 0x8d, 0xe6, 0xfa, 0xe7, 0xff, 0xd8, 0xba, 0xf1, 0xf9, 0xeb, 0x2d, 0xe3, 0x8b,
	0xd7, 0x5b, 0xc6, 0x97, 0xaf, 0xb7, 0x8c, 0xdf, 0xfd, 0x73, 0xeb, 0xc6, 0xcf, 0x4d, 0x27, 0x70,
	0xdb, 0x25, 0xfa, 0xa2, 0xfd, 0xf0, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xad, 0x99, 0xb8, 0x7b,
	0x7d, 0x17, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DemoClient is the client API for Demo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DemoClient interface {
	MatchList(ctx context.Context, in *MatchListReq, opts ...grpc.CallOption) (*MatchListResp, error)
	GradeInfo(ctx context.Context, in *GradeInfoReq, opts ...grpc.CallOption) (*GradeInfoResp, error)
	Economic(ctx context.Context, in *EconomicReq, opts ...grpc.CallOption) (*EconomicResp, error)
	Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error)
	Webhook(ctx context.Context, in *WebhookReq, opts ...grpc.CallOption) (*WebhookResp, error)
}

type demoClient struct {
	cc *grpc.ClientConn
}

func NewDemoClient(cc *grpc.ClientConn) DemoClient {
	return &demoClient{cc}
}

func (c *demoClient) MatchList(ctx context.Context, in *MatchListReq, opts ...grpc.CallOption) (*MatchListResp, error) {
	out := new(MatchListResp)
	err := c.cc.Invoke(ctx, "/demo.service.v1.Demo/MatchList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) GradeInfo(ctx context.Context, in *GradeInfoReq, opts ...grpc.CallOption) (*GradeInfoResp, error) {
	out := new(GradeInfoResp)
	err := c.cc.Invoke(ctx, "/demo.service.v1.Demo/GradeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) Economic(ctx context.Context, in *EconomicReq, opts ...grpc.CallOption) (*EconomicResp, error) {
	out := new(EconomicResp)
	err := c.cc.Invoke(ctx, "/demo.service.v1.Demo/Economic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	out := new(InfoResp)
	err := c.cc.Invoke(ctx, "/demo.service.v1.Demo/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) Webhook(ctx context.Context, in *WebhookReq, opts ...grpc.CallOption) (*WebhookResp, error) {
	out := new(WebhookResp)
	err := c.cc.Invoke(ctx, "/demo.service.v1.Demo/Webhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DemoServer is the server API for Demo service.
type DemoServer interface {
	MatchList(context.Context, *MatchListReq) (*MatchListResp, error)
	GradeInfo(context.Context, *GradeInfoReq) (*GradeInfoResp, error)
	Economic(context.Context, *EconomicReq) (*EconomicResp, error)
	Info(context.Context, *InfoReq) (*InfoResp, error)
	Webhook(context.Context, *WebhookReq) (*WebhookResp, error)
}

// UnimplementedDemoServer can be embedded to have forward compatible implementations.
type UnimplementedDemoServer struct {
}

func (*UnimplementedDemoServer) MatchList(ctx context.Context, req *MatchListReq) (*MatchListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchList not implemented")
}
func (*UnimplementedDemoServer) GradeInfo(ctx context.Context, req *GradeInfoReq) (*GradeInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GradeInfo not implemented")
}
func (*UnimplementedDemoServer) Economic(ctx context.Context, req *EconomicReq) (*EconomicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Economic not implemented")
}
func (*UnimplementedDemoServer) Info(ctx context.Context, req *InfoReq) (*InfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedDemoServer) Webhook(ctx context.Context, req *WebhookReq) (*WebhookResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Webhook not implemented")
}

func RegisterDemoServer(s *grpc.Server, srv DemoServer) {
	s.RegisterService(&_Demo_serviceDesc, srv)
}

func _Demo_MatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).MatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.Demo/MatchList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).MatchList(ctx, req.(*MatchListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_GradeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradeInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).GradeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.Demo/GradeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).GradeInfo(ctx, req.(*GradeInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_Economic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EconomicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).Economic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.Demo/Economic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).Economic(ctx, req.(*EconomicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.Demo/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).Info(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_Webhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).Webhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.Demo/Webhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).Webhook(ctx, req.(*WebhookReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Demo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "demo.service.v1.Demo",
	HandlerType: (*DemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MatchList",
			Handler:    _Demo_MatchList_Handler,
		},
		{
			MethodName: "GradeInfo",
			Handler:    _Demo_GradeInfo_Handler,
		},
		{
			MethodName: "Economic",
			Handler:    _Demo_Economic_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Demo_Info_Handler,
		},
		{
			MethodName: "Webhook",
			Handler:    _Demo_Webhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shenyue-gin/app/service/vrgo/api/api.proto",
}

func (m *WebhookReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebhookReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebhookReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Event) > 0 {
		i -= len(m.Event)
		copy(dAtA[i:], m.Event)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Event)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WebhookResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebhookResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebhookResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *InfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Time != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PlayerNow) > 0 {
		for iNdEx := len(m.PlayerNow) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.MarshalToSizedBuffer(m.PlayerNow[iNdEx], dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TeamNow != nil {
		{
			size, err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.MarshalToSizedBuffer(m.TeamNow, dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Time != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerNow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerNow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerNow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Y != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x28
	}
	if m.X != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x20
	}
	if m.Economic != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Economic))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Coler) > 0 {
		i -= len(m.Coler)
		copy(dAtA[i:], m.Coler)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Coler)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeamNow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamNow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamNow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BlueDragon != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BlueDragon))
		i--
		dAtA[i] = 0x50
	}
	if m.RedDragon != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RedDragon))
		i--
		dAtA[i] = 0x48
	}
	if len(m.BlueName) > 0 {
		i -= len(m.BlueName)
		copy(dAtA[i:], m.BlueName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BlueName)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RedName) > 0 {
		i -= len(m.RedName)
		copy(dAtA[i:], m.RedName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RedName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RedEconomic) > 0 {
		i -= len(m.RedEconomic)
		copy(dAtA[i:], m.RedEconomic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RedEconomic)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BlueEconomic) > 0 {
		i -= len(m.BlueEconomic)
		copy(dAtA[i:], m.BlueEconomic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BlueEconomic)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RedTower != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RedTower))
		i--
		dAtA[i] = 0x20
	}
	if m.BlueTower != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BlueTower))
		i--
		dAtA[i] = 0x18
	}
	if m.RedKill != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RedKill))
		i--
		dAtA[i] = 0x10
	}
	if m.BlueKill != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BlueKill))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EconomicReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EconomicReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EconomicReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Time != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EconomicResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EconomicResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EconomicResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Economic) > 0 {
		for iNdEx := len(m.Economic) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.MarshalToSizedBuffer(m.Economic[iNdEx], dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EconomicItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EconomicItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EconomicItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Coler) > 0 {
		i -= len(m.Coler)
		copy(dAtA[i:], m.Coler)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Coler)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GradeInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GradeInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GradeInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MatchListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GradeInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GradeInfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GradeInfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GlobalGradeInfo != nil {
		{
			size, err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.MarshalToSizedBuffer(m.GlobalGradeInfo, dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.AwayTeam != nil {
		{
			size, err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.MarshalToSizedBuffer(m.AwayTeam, dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.HomeTeam != nil {
		{
			size, err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.MarshalToSizedBuffer(m.HomeTeam, dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.AwayScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwayScore))
		i--
		dAtA[i] = 0x48
	}
	if m.HomeScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HomeScore))
		i--
		dAtA[i] = 0x40
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x30
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.GameStage) > 0 {
		i -= len(m.GameStage)
		copy(dAtA[i:], m.GameStage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameStage)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Teams) > 0 {
		for iNdEx := len(m.Teams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.MarshalToSizedBuffer(m.Teams[iNdEx], dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Team1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Team1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Team1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlayerGradeDetail) > 0 {
		for iNdEx := len(m.PlayerGradeDetail) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.MarshalToSizedBuffer(m.PlayerGradeDetail[iNdEx], dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayerGradeDetail1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerGradeDetail1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerGradeDetail1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HeroPhoto) > 0 {
		i -= len(m.HeroPhoto)
		copy(dAtA[i:], m.HeroPhoto)
		i = encodeVarintApi(dAtA, i, uint64(len(m.HeroPhoto)))
		i--
		dAtA[i] = 0x62
	}
	if m.Assist != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Assist))
		i--
		dAtA[i] = 0x58
	}
	if m.Kill != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Kill))
		i--
		dAtA[i] = 0x50
	}
	if m.Death != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Death))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AvgGrade) > 0 {
		i -= len(m.AvgGrade)
		copy(dAtA[i:], m.AvgGrade)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AvgGrade)))
		i--
		dAtA[i] = 0x32
	}
	if m.GradeUsers != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GradeUsers))
		i--
		dAtA[i] = 0x28
	}
	if len(m.HotRemark) > 0 {
		i -= len(m.HotRemark)
		copy(dAtA[i:], m.HotRemark)
		i = encodeVarintApi(dAtA, i, uint64(len(m.HotRemark)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Portrait) > 0 {
		i -= len(m.Portrait)
		copy(dAtA[i:], m.Portrait)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Portrait)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Season1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Season1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Season1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CentrePcLogo) > 0 {
		i -= len(m.CentrePcLogo)
		copy(dAtA[i:], m.CentrePcLogo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CentrePcLogo)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.GuessVersion != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GuessVersion))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.CentreStatus != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CentreStatus))
		i--
		dAtA[i] = 0x78
	}
	if len(m.CentreLogo) > 0 {
		i -= len(m.CentreLogo)
		copy(dAtA[i:], m.CentreLogo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CentreLogo)))
		i--
		dAtA[i] = 0x72
	}
	if m.ExternalSeasonId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ExternalSeasonId))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Channel) > 0 {
		dAtA6 := make([]byte, len(m.Channel)*10)
		var j5 int
		for _, num1 := range m.Channel {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintApi(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x5a
	}
	if m.SyncPlatform != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SyncPlatform))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x42
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x32
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x28
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *GlobalGradeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalGradeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalGradeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AwayTeam != nil {
		{
			size, err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.MarshalToSizedBuffer(m.AwayTeam, dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.HomeTeam != nil {
		{
			size, err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.MarshalToSizedBuffer(m.HomeTeam, dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalGradeTeam1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalGradeTeam1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalGradeTeam1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.MarshalToSizedBuffer(m.Players[iNdEx], dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalGradePlayer1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalGradePlayer1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalGradePlayer1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Place) > 0 {
		i -= len(m.Place)
		copy(dAtA[i:], m.Place)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Place)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AvgGrade) > 0 {
		i -= len(m.AvgGrade)
		copy(dAtA[i:], m.AvgGrade)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AvgGrade)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if m.PlayerId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Contest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Contest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AwayTeam != nil {
		{
			size, err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.MarshalToSizedBuffer(m.AwayTeam, dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.HomeTeam != nil {
		{
			size, err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.MarshalToSizedBuffer(m.HomeTeam, dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.Season != nil {
		{
			size, err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.MarshalToSizedBuffer(m.Season, dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x70
	}
	if m.AwayScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwayScore))
		i--
		dAtA[i] = 0x40
	}
	if m.HomeScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HomeScore))
		i--
		dAtA[i] = 0x38
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x20
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GameStage) > 0 {
		i -= len(m.GameStage)
		copy(dAtA[i:], m.GameStage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameStage)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *MatchListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MatchList) > 0 {
		for iNdEx := len(m.MatchList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.MarshalToSizedBuffer(m.MatchList[iNdEx], dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MatchList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AwayTeam != nil {
		{
			size, err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.MarshalToSizedBuffer(m.AwayTeam, dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.HomeTeam != nil {
		{
			size, err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.MarshalToSizedBuffer(m.HomeTeam, dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.Season != nil {
		{
			size, err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.MarshalToSizedBuffer(m.Season, dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.AwayScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwayScore))
		i--
		dAtA[i] = 0x40
	}
	if m.HomeScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HomeScore))
		i--
		dAtA[i] = 0x38
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x20
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GameStage) > 0 {
		i -= len(m.GameStage)
		copy(dAtA[i:], m.GameStage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameStage)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *Season) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Season) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Season) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x42
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x30
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SubTitle) > 0 {
		i -= len(m.SubTitle)
		copy(dAtA[i:], m.SubTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubTitle)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *Team) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Team) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Team) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SubTitle) > 0 {
		i -= len(m.SubTitle)
		copy(dAtA[i:], m.SubTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *Game) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Game) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Game) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LogoFull) > 0 {
		i -= len(m.LogoFull)
		copy(dAtA[i:], m.LogoFull)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LogoFull)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Dic) > 0 {
		i -= len(m.Dic)
		copy(dAtA[i:], m.Dic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Dic)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PbTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PbTime))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Operations) > 0 {
		i -= len(m.Operations)
		copy(dAtA[i:], m.Operations)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Operations)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Publisher) > 0 {
		i -= len(m.Publisher)
		copy(dAtA[i:], m.Publisher)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Publisher)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x3a
	}
	if m.GameType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Plat) > 0 {
		i -= len(m.Plat)
		copy(dAtA[i:], m.Plat)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Plat)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ETitle) > 0 {
		i -= len(m.ETitle)
		copy(dAtA[i:], m.ETitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ETitle)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SubTitle) > 0 {
		i -= len(m.SubTitle)
		copy(dAtA[i:], m.SubTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WebhookReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebhookResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovApi(uint64(m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovApi(uint64(m.Time))
	}
	if m.TeamNow != nil {
		l = git_bilibili_co_go_kratos_gogo_protobuf_compatible.Size(m.TeamNow)
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.PlayerNow) > 0 {
		for _, e := range m.PlayerNow {
			l = git_bilibili_co_go_kratos_gogo_protobuf_compatible.Size(e)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerNow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Coler)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Economic != 0 {
		n += 1 + sovApi(uint64(m.Economic))
	}
	if m.X != 0 {
		n += 1 + sovApi(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovApi(uint64(m.Y))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamNow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueKill != 0 {
		n += 1 + sovApi(uint64(m.BlueKill))
	}
	if m.RedKill != 0 {
		n += 1 + sovApi(uint64(m.RedKill))
	}
	if m.BlueTower != 0 {
		n += 1 + sovApi(uint64(m.BlueTower))
	}
	if m.RedTower != 0 {
		n += 1 + sovApi(uint64(m.RedTower))
	}
	l = len(m.BlueEconomic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RedEconomic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RedName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BlueName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RedDragon != 0 {
		n += 1 + sovApi(uint64(m.RedDragon))
	}
	if m.BlueDragon != 0 {
		n += 1 + sovApi(uint64(m.BlueDragon))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EconomicReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovApi(uint64(m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EconomicResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Economic) > 0 {
		for _, e := range m.Economic {
			l = git_bilibili_co_go_kratos_gogo_protobuf_compatible.Size(e)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EconomicItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Coler)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovApi(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GradeInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MatchListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GradeInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = git_bilibili_co_go_kratos_gogo_protobuf_compatible.Size(e)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.GameStage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if m.HomeScore != 0 {
		n += 1 + sovApi(uint64(m.HomeScore))
	}
	if m.AwayScore != 0 {
		n += 1 + sovApi(uint64(m.AwayScore))
	}
	if m.HomeTeam != nil {
		l = git_bilibili_co_go_kratos_gogo_protobuf_compatible.Size(m.HomeTeam)
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AwayTeam != nil {
		l = git_bilibili_co_go_kratos_gogo_protobuf_compatible.Size(m.AwayTeam)
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GlobalGradeInfo != nil {
		l = git_bilibili_co_go_kratos_gogo_protobuf_compatible.Size(m.GlobalGradeInfo)
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Team1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.PlayerGradeDetail) > 0 {
		for _, e := range m.PlayerGradeDetail {
			l = git_bilibili_co_go_kratos_gogo_protobuf_compatible.Size(e)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerGradeDetail1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Portrait)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.HotRemark)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GradeUsers != 0 {
		n += 1 + sovApi(uint64(m.GradeUsers))
	}
	l = len(m.AvgGrade)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Death != 0 {
		n += 1 + sovApi(uint64(m.Death))
	}
	if m.Kill != 0 {
		n += 1 + sovApi(uint64(m.Kill))
	}
	if m.Assist != 0 {
		n += 1 + sovApi(uint64(m.Assist))
	}
	l = len(m.HeroPhoto)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Season1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SyncPlatform != 0 {
		n += 1 + sovApi(uint64(m.SyncPlatform))
	}
	if len(m.Channel) > 0 {
		l = 0
		for _, e := range m.Channel {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.ExternalSeasonId != 0 {
		n += 1 + sovApi(uint64(m.ExternalSeasonId))
	}
	l = len(m.CentreLogo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CentreStatus != 0 {
		n += 1 + sovApi(uint64(m.CentreStatus))
	}
	if m.GuessVersion != 0 {
		n += 2 + sovApi(uint64(m.GuessVersion))
	}
	l = len(m.CentrePcLogo)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GlobalGradeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HomeTeam != nil {
		l = git_bilibili_co_go_kratos_gogo_protobuf_compatible.Size(m.HomeTeam)
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AwayTeam != nil {
		l = git_bilibili_co_go_kratos_gogo_protobuf_compatible.Size(m.AwayTeam)
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GlobalGradeTeam1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = git_bilibili_co_go_kratos_gogo_protobuf_compatible.Size(e)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GlobalGradePlayer1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != 0 {
		n += 1 + sovApi(uint64(m.PlayerId))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AvgGrade)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Place)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Contest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameStage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if m.HomeScore != 0 {
		n += 1 + sovApi(uint64(m.HomeScore))
	}
	if m.AwayScore != 0 {
		n += 1 + sovApi(uint64(m.AwayScore))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.Season != nil {
		l = git_bilibili_co_go_kratos_gogo_protobuf_compatible.Size(m.Season)
		n += 2 + l + sovApi(uint64(l))
	}
	if m.HomeTeam != nil {
		l = git_bilibili_co_go_kratos_gogo_protobuf_compatible.Size(m.HomeTeam)
		n += 2 + l + sovApi(uint64(l))
	}
	if m.AwayTeam != nil {
		l = git_bilibili_co_go_kratos_gogo_protobuf_compatible.Size(m.AwayTeam)
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MatchListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MatchList) > 0 {
		for _, e := range m.MatchList {
			l = git_bilibili_co_go_kratos_gogo_protobuf_compatible.Size(e)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MatchList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameStage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if m.HomeScore != 0 {
		n += 1 + sovApi(uint64(m.HomeScore))
	}
	if m.AwayScore != 0 {
		n += 1 + sovApi(uint64(m.AwayScore))
	}
	if m.Season != nil {
		l = git_bilibili_co_go_kratos_gogo_protobuf_compatible.Size(m.Season)
		n += 2 + l + sovApi(uint64(l))
	}
	if m.HomeTeam != nil {
		l = git_bilibili_co_go_kratos_gogo_protobuf_compatible.Size(m.HomeTeam)
		n += 2 + l + sovApi(uint64(l))
	}
	if m.AwayTeam != nil {
		l = git_bilibili_co_go_kratos_gogo_protobuf_compatible.Size(m.AwayTeam)
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Season) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Team) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Game) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ETitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Plat)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GameType != 0 {
		n += 1 + sovApi(uint64(m.GameType))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Publisher)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Operations)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PbTime != 0 {
		n += 1 + sovApi(uint64(m.PbTime))
	}
	l = len(m.Dic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LogoFull)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WebhookReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebhookReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebhookReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebhookResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebhookResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebhookResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamNow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamNow == nil {
				m.TeamNow = &TeamNow{}
			}
			if err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.Unmarshal(m.TeamNow, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerNow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerNow = append(m.PlayerNow, &PlayerNow{})
			if err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.Unmarshal(m.PlayerNow[len(m.PlayerNow)-1], dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerNow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerNow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerNow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Economic", wireType)
			}
			m.Economic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Economic |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamNow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamNow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamNow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueKill", wireType)
			}
			m.BlueKill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlueKill |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedKill", wireType)
			}
			m.RedKill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedKill |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueTower", wireType)
			}
			m.BlueTower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlueTower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedTower", wireType)
			}
			m.RedTower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedTower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueEconomic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlueEconomic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedEconomic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedEconomic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedDragon", wireType)
			}
			m.RedDragon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedDragon |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueDragon", wireType)
			}
			m.BlueDragon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlueDragon |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EconomicReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EconomicReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EconomicReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EconomicResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EconomicResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EconomicResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Economic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Economic = append(m.Economic, &EconomicItem{})
			if err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.Unmarshal(m.Economic[len(m.Economic)-1], dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EconomicItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EconomicItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EconomicItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GradeInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GradeInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GradeInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GradeInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GradeInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GradeInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &Team1{})
			if err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.Unmarshal(m.Teams[len(m.Teams)-1], dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameStage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeScore", wireType)
			}
			m.HomeScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeScore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayScore", wireType)
			}
			m.AwayScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwayScore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HomeTeam == nil {
				m.HomeTeam = &Team1{}
			}
			if err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.Unmarshal(m.HomeTeam, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwayTeam == nil {
				m.AwayTeam = &Team1{}
			}
			if err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.Unmarshal(m.AwayTeam, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalGradeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalGradeInfo == nil {
				m.GlobalGradeInfo = &GlobalGradeInfo{}
			}
			if err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.Unmarshal(m.GlobalGradeInfo, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Team1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Team1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Team1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerGradeDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerGradeDetail = append(m.PlayerGradeDetail, &PlayerGradeDetail1{})
			if err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.Unmarshal(m.PlayerGradeDetail[len(m.PlayerGradeDetail)-1], dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerGradeDetail1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerGradeDetail1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerGradeDetail1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Portrait", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Portrait = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HotRemark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GradeUsers", wireType)
			}
			m.GradeUsers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GradeUsers |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgGrade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvgGrade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Death", wireType)
			}
			m.Death = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Death |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kill", wireType)
			}
			m.Kill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kill |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assist", wireType)
			}
			m.Assist = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Assist |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroPhoto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroPhoto = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Season1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Season1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Season1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncPlatform", wireType)
			}
			m.SyncPlatform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncPlatform |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Channel = append(m.Channel, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Channel) == 0 {
					m.Channel = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Channel = append(m.Channel, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalSeasonId", wireType)
			}
			m.ExternalSeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalSeasonId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CentreLogo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CentreLogo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CentreStatus", wireType)
			}
			m.CentreStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CentreStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessVersion", wireType)
			}
			m.GuessVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuessVersion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CentrePcLogo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CentrePcLogo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalGradeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalGradeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalGradeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HomeTeam == nil {
				m.HomeTeam = &GlobalGradeTeam1{}
			}
			if err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.Unmarshal(m.HomeTeam, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwayTeam == nil {
				m.AwayTeam = &GlobalGradeTeam1{}
			}
			if err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.Unmarshal(m.AwayTeam, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalGradeTeam1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalGradeTeam1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalGradeTeam1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &GlobalGradePlayer1{})
			if err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.Unmarshal(m.Players[len(m.Players)-1], dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalGradePlayer1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalGradePlayer1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalGradePlayer1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgGrade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvgGrade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Place", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Place = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Contest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameStage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeScore", wireType)
			}
			m.HomeScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayScore", wireType)
			}
			m.AwayScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwayScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &Season1{}
			}
			if err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.Unmarshal(m.Season, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HomeTeam == nil {
				m.HomeTeam = &Team1{}
			}
			if err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.Unmarshal(m.HomeTeam, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwayTeam == nil {
				m.AwayTeam = &Team1{}
			}
			if err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.Unmarshal(m.AwayTeam, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchList = append(m.MatchList, &MatchList{})
			if err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.Unmarshal(m.MatchList[len(m.MatchList)-1], dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameStage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeScore", wireType)
			}
			m.HomeScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayScore", wireType)
			}
			m.AwayScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwayScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &Season{}
			}
			if err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.Unmarshal(m.Season, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HomeTeam == nil {
				m.HomeTeam = &Team{}
			}
			if err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.Unmarshal(m.HomeTeam, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwayTeam == nil {
				m.AwayTeam = &Team{}
			}
			if err := git_bilibili_co_go_kratos_gogo_protobuf_compatible.Unmarshal(m.AwayTeam, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Season) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Season: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Season: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Team) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Team: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Team: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Game) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Game: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Game: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ETitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ETitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publisher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Publisher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operations = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PbTime", wireType)
			}
			m.PbTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PbTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoFull", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogoFull = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
