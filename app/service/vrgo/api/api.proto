// 定义项目 API 的 proto 文件 可以同时描述 gRPC 和 HTTP API
// protobuf 文件参考:
//  - https://developers.google.com/protocol-buffers/
syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..
package demo.service.v1;

// NOTE: 最后请删除这些无用的注释 (゜-゜)つロ

option go_package = "api";
option (gogoproto.goproto_getters_all) = false;

service Demo {
  rpc MatchList(MatchListReq) returns (MatchListResp) {
    option (google.api.http) = {
      get: "/vr/match/list"
    };
  };
  rpc GradeInfo(GradeInfoReq) returns (GradeInfoResp) {
    option (google.api.http) = {
      get: "/vr/grade/info"
    };
  };
  rpc Economic(EconomicReq) returns (EconomicResp) {
    option (google.api.http) = {
      get: "/vr/economic/info"
    };
  }
  rpc Info(InfoReq) returns (InfoResp){
    option (google.api.http) = {
      get: "/vr/now/info"
    };
  }
  rpc Webhook(WebhookReq) returns (WebhookResp){
    option (google.api.http) = {
      post: "/vr/webhook"
    };
  }
}

message WebhookReq {
  // event
  string event = 1 [(gogoproto.jsontag) = 'event'];
  // content
  string content = 2 [(gogoproto.jsontag) = 'content'];
  // timestamp
  string timestamp = 3 [(gogoproto.jsontag) = 'timestamp'];
}

message WebhookResp {
  // content
  string content = 2 [(gogoproto.jsontag) = 'content'];
}

message InfoReq{
  // 时间 秒 int类型
  int64 time = 1 [(gogoproto.moretags) = 'form:"time"'];
}

message InfoResp{
  // 时间 秒 int类型
  int64 time = 1 [(gogoproto.jsontag) = 'time'];
  TeamNow teamNow= 2 [(gogoproto.jsontag) = 'team_now'];
  repeated PlayerNow playerNow = 3 [(gogoproto.jsontag) = 'player_now'];
  Status status = 4 [(gogoproto.jsontag) = 'status'];
}

enum Status {
  Status1 = 0;
  Status2 = 1;
  Status3 = 2;
}

message PlayerNow{
  // red blue
  string coler = 1 [(gogoproto.jsontag) = 'coler'];
  // 英雄名字
  string name = 2 [(gogoproto.jsontag) = 'name'];
  // 经济
  int64 economic = 3 [(gogoproto.jsontag) = 'economic'];
  int64 x = 4 [(gogoproto.jsontag) = 'x'];
  int64 y = 5 [(gogoproto.jsontag) = 'y'];
}

message TeamNow{
  int64 blue_kill = 1 [(gogoproto.jsontag) = 'blue_kill'];
  int64 red_kill = 2 [(gogoproto.jsontag) = 'red_kill'];
  int64 blue_tower = 3 [(gogoproto.jsontag) = 'blue_tower'];
  int64 red_tower = 4 [(gogoproto.jsontag) = 'red_tower'];
  string blue_economic = 5 [(gogoproto.jsontag) = 'blue_economic'];
  string red_economic = 6 [(gogoproto.jsontag) = 'red_economic'];
  string red_name = 7 [(gogoproto.jsontag) = 'red_name'];
  string blue_name = 8 [(gogoproto.jsontag) = 'blue_name'];
  int64 red_dragon = 9 [(gogoproto.jsontag) = 'red_dragon'];
  int64 blue_dragon = 10 [(gogoproto.jsontag) = 'blue_dragon'];

}


message EconomicReq{
  // 时间 秒 int类型
  int64 time = 1 [(gogoproto.jsontag) = 'time'];

}

message EconomicResp{
  repeated EconomicItem economic = 1 [(gogoproto.jsontag) = 'economic'];
}

message EconomicItem{
  // red blue
  string coler = 1 [(gogoproto.jsontag) = 'coler'];
  // 英雄名字
  string name = 2 [(gogoproto.jsontag) = 'name'];
  // 经济
  int64 value = 3 [(gogoproto.jsontag) = 'value'];
}

message GradeInfoReq {

}



message MatchListReq {

}




// Data 定义了响应中的数据部分
message GradeInfoResp {
  repeated Team1 teams = 1 [(gogoproto.jsontag) = 'teams'];
  // 场次
  string game_stage = 4 [(gogoproto.jsontag) = 'game_stage'];
  //开始时间
  int64 stime = 5 [(gogoproto.jsontag) = 'stime'];
  //结束时间
  int64 etime = 6 [(gogoproto.jsontag) = 'etime'];
  //主队得分
  int32 home_score = 8 [(gogoproto.jsontag) = 'home_score'];
  //客队得分
  int32 away_score = 9 [(gogoproto.jsontag) = 'away_score'];
  //主队信息
  Team1 home_team = 13 [(gogoproto.jsontag) = 'home_team'];
  //客队信息
  Team1 away_team = 14 [(gogoproto.jsontag) = 'away_team'];
  GlobalGradeInfo global_grade_info = 18 [(gogoproto.jsontag) = 'global_grade_info'];
}

// Team 定义了一个队伍的结构
message Team1 {
  //名字
  string name = 1 [(gogoproto.jsontag) = 'name'];
  //logo
  string logo = 2 [(gogoproto.jsontag) = 'logo'];
  //选手评分详情
  repeated PlayerGradeDetail1 player_grade_detail = 3 [(gogoproto.jsontag) = 'player_grade_detail'];
}

// PlayerGradeDetail 定义了一个选手的评分详情
message PlayerGradeDetail1 {
  //名字
  string nickname = 1 [(gogoproto.jsontag) = 'nickname'];
  // 选手照片
  string portrait = 3 [(gogoproto.jsontag) = 'portrait'];
  //热评
  string hot_remark = 4 [(gogoproto.jsontag) = 'hot_remark'];
  //评分人数
  int32 grade_users = 5 [(gogoproto.jsontag) = 'grade_users'];
  // 平均评分
  string avg_grade = 6 [(gogoproto.jsontag) = 'avg_grade'];
  //位置
  string position = 7 [(gogoproto.jsontag) = 'position'];
  //死亡
  int32 death = 9 [(gogoproto.jsontag) = 'death'];
  //杀敌
  int32 kill = 10 [(gogoproto.jsontag) = 'kill'];
  //辅助
  int32 assist = 11 [(gogoproto.jsontag) = 'assist'];
  //英雄照片
  string hero_photo = 12 [(gogoproto.jsontag) = 'hero_photo'];
}

// Season 定义了赛季的信息
message Season1 {
  string title = 3 [(gogoproto.jsontag) = 'title'];
  int64 stime = 4 [(gogoproto.jsontag) = 'stime'];
  int64 etime = 5 [(gogoproto.jsontag) = 'etime'];
  string logo = 6 [(gogoproto.jsontag) = 'logo'];
  int32 rank = 7 [(gogoproto.jsontag) = 'rank'];
  string url = 8 [(gogoproto.jsontag) = 'URL'];
  int32 sync_platform = 10 [(gogoproto.jsontag) = 'syncPlatform'];
  repeated int32 channel = 11 [(gogoproto.jsontag) = 'channel'];
  int32 external_season_id = 13 [(gogoproto.jsontag) = 'externalSeasonId'];
  string centre_logo = 14 [(gogoproto.jsontag) = 'centreLogo'];
  int32 centre_status = 15 [(gogoproto.jsontag) = 'centreStatus'];
  int32 guess_version = 16 [(gogoproto.jsontag) = 'guessVersion'];
  string centre_pc_logo = 17 [(gogoproto.jsontag) = 'centrePCLogo'];
}

// GlobalGradeInfo 定义了全球评分信息
message GlobalGradeInfo {
  GlobalGradeTeam1 home_team = 1 [(gogoproto.jsontag) = 'home_team'];
  GlobalGradeTeam1 away_team = 2 [(gogoproto.jsontag) = 'away_team'];
}

// GlobalGradeTeam 定义了一个队伍的全球评分信息
message GlobalGradeTeam1 {
  repeated GlobalGradePlayer1 players = 1 [(gogoproto.jsontag) = 'players'];
}

// GlobalGradePlayer 定义了一个选手的全球评分信息
message GlobalGradePlayer1 {
  int32 player_id = 1 [(gogoproto.jsontag) = 'player_id']; // id
  string nickname = 2 [(gogoproto.jsontag) = 'nickname']; // 名字
  string avg_grade = 3 [(gogoproto.jsontag) = 'avg_grade']; // 平均评分
  string place = 4 [(gogoproto.jsontag) = 'place']; //位置 上单 打野 ...
}






//赛程数据
message Contest {
  //比赛阶段
  string GameStage = 2
  [(gogoproto.jsontag) = "game_stage", json_name = "game_stage"];
  //比赛开始时间
  int64 Stime = 3 [(gogoproto.jsontag) = "stime", json_name = "stime"];
  //比赛结束时间
  int64 Etime = 4 [(gogoproto.jsontag) = "etime", json_name = "etime"];
  //主场分数
  int64 HomeScore = 7
  [(gogoproto.jsontag) = "home_score", json_name = "home_score"];
  //客场分数
  int64 AwayScore = 8
  [(gogoproto.jsontag) = "away_score", json_name = "away_score"];


  //创建时间
  int64 Status = 14 [(gogoproto.jsontag) = "status", json_name = "status"];

  //赛季
  Season1 season = 27 [(gogoproto.jsontag) = "season", json_name = "season"];
  //主场战队信息
  Team1 HomeTeam = 28
  [(gogoproto.jsontag) = "home_team", json_name = "home_team"];
  //客场战队信息
  Team1 AwayTeam = 29
  [(gogoproto.jsontag) = "away_team", json_name = "away_team"];
}




message MatchListResp {
  repeated MatchList matchList = 1 [(gogoproto.jsontag) = 'list'];
}



message MatchList {
  //比赛阶段
  string GameStage = 2
  [(gogoproto.jsontag) = "game_stage", json_name = "game_stage"];
  //比赛开始时间
  int64 Stime = 3 [(gogoproto.jsontag) = "stime", json_name = "stime"];
  //比赛结束时间
  int64 Etime = 4 [(gogoproto.jsontag) = "etime", json_name = "etime"];
  //主场分数
  int64 HomeScore = 7
  [(gogoproto.jsontag) = "home_score", json_name = "home_score"];
  //客场分数
  int64 AwayScore = 8
  [(gogoproto.jsontag) = "away_score", json_name = "away_score"];
  //赛季
  Season season = 27 [(gogoproto.jsontag) = "season", json_name = "season"];
  //主场战队信息
  Team HomeTeam = 28
  [(gogoproto.jsontag) = "home_team", json_name = "home_team"];
  //客场战队信息
  Team AwayTeam = 29
  [(gogoproto.jsontag) = "away_team", json_name = "away_team"];
}

//赛季数据
message Season {
  //简称
  string Title = 3 [(gogoproto.jsontag) = "title", json_name = "title"];
  //全称
  string SubTitle = 4
  [(gogoproto.jsontag) = "sub_title", json_name = "sub_title"];
  //开始时间
  int64 Stime = 5 [(gogoproto.jsontag) = "stime", json_name = "stime"];
  //结束时间
  int64 Etime = 6 [(gogoproto.jsontag) = "etime", json_name = "etime"];

  // logo
  string Logo = 8 [(gogoproto.jsontag) = "logo", json_name = "logo"];

  //赛季URL
  string URL = 13 [(gogoproto.jsontag) = "url", json_name = "url"];
}


message Team {
  //简称
  string Title = 2 [(gogoproto.jsontag) = "title", json_name = "title"];
  //全称
  string SubTitle = 3
  [(gogoproto.jsontag) = "sub_title", json_name = "sub_title"];
  //英文全称
  string Logo = 7 [(gogoproto.jsontag) = "logo", json_name = "logo"];

}

//游戏数据
message Game {
  //中文全称
  string Title = 2 [(gogoproto.jsontag) = "title", json_name = "title"];
  //游戏简称
  string SubTitle = 3
  [(gogoproto.jsontag) = "sub_title", json_name = "sub_title"];
  //英文全称
  string ETitle = 4 [(gogoproto.jsontag) = "e_title", json_name = "e_title"];
  //平台
  string Plat = 5 [(gogoproto.jsontag) = "plat", json_name = "plat"];
  //游戏类型
  int64 GameType = 6
  [(gogoproto.jsontag) = "game_type", json_name = "game_type"];
  //游戏 logo
  string Logo = 7 [(gogoproto.jsontag) = "logo", json_name = "logo"];
  //发行商
  string Publisher = 8
  [(gogoproto.jsontag) = "publisher", json_name = "publisher"];
  //运行商
  string Operations = 9
  [(gogoproto.jsontag) = "operations", json_name = "operations"];
  //发布时间
  int64 PbTime = 10 [(gogoproto.jsontag) = "pb_time", json_name = "pb_time"];
  //备注
  string Dic = 11 [(gogoproto.jsontag) = "dic", json_name = "dic"];
  // LOGO全
  string LogoFull = 12
  [(gogoproto.jsontag) = "logo_full", json_name = "logo_full"];
}


